buildscript {
	ext {
		kotlinVersion = '1.2.41'
		springBootVersion = '2.0.2.RELEASE'
	}
	repositories {
		mavenCentral()
		google()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'
idea {
	module {
		outputDir file('build/classes/main')
		testOutputDir file('build/classes/test')
	}
}
if(project.convention.findPlugin(JavaPluginConvention)) {
	// Change the output directory for the main and test source sets back to the old path
	sourceSets.main.java.outputDir = new File(buildDir, "classes/main")
	sourceSets.test.java.outputDir = new File(buildDir, "classes/test")
}

group = 'jp.co.app'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('com.fasterxml.jackson.module:jackson-module-kotlin')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	compile("org.jetbrains.kotlin:kotlin-reflect")
	testCompile('org.springframework.boot:spring-boot-starter-test')
	compile("org.springframework.boot:spring-boot-starter-thymeleaf")
	compile("org.springframework.boot:spring-boot-devtools")
	compile 'com.google.guava:guava:25.0-jre'
}

jar {
	exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
	manifest {
		attributes "Main-Class" : "jp.co.app.myblockchainspring.MyBlockChainSpringApplicationKt"
	}
	baseName = 'my-blockchain-spring'
	archiveName = "${baseName}.jar"
	from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}

